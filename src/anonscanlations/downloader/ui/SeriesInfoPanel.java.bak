/*
 * Coded by /a/non, for /a/non
 */

package anonscanlations.downloader.ui;

import anonscanlations.downloader.*;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.text.*;

import java.io.*;
import java.util.*;
import java.net.*;
import java.text.*;

/**
 *
 * @author /a/non
 */
public class SeriesInfoPanel extends JPanel
{
    private DownloaderWindow window;
    private ImagePanel image;
    private JPanel infoPanel, fieldPanel, buttonPanel;
    private JButton submitButton, downloadButton;
    
    private HashMap<String, JTextField> fieldMap;
    private Chapter chapter;

    public SeriesInfoPanel(DownloaderWindow myWindow)
    {
        window = myWindow;
        fieldMap = new HashMap<String, JTextField>();
        chapter = null;

        setupUI();
    }
    private void setupUI()
    {
        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        setBorder(new EmptyBorder(10, 10, 10, 10));
        setPreferredSize(new Dimension(400, 0));

        infoPanel = new JPanel();
        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.PAGE_AXIS));
        
        image = new ImagePanel();
        infoPanel.add(image);

        fieldPanel = new JPanel();
        fieldPanel.setLayout(new BoxLayout(fieldPanel, BoxLayout.PAGE_AXIS));
        infoPanel.add(fieldPanel);

        add(infoPanel);
        
        setupButtons();
        add(buttonPanel);
    }
    public void clear()
    {
        fieldPanel.removeAll();
        fieldPanel.updateUI();
        image.clear();
        setButtonStates(false, false, false);
        chapter = null;
        fieldMap.clear();
    }

    private static void browse(String url)
    {
        Desktop desktop = Desktop.getDesktop();

        if(desktop.isSupported(java.awt.Desktop.Action.BROWSE))
        {
            try
            {
                URI uri = new URI(url);
                desktop.browse(uri);
            }
            catch(Exception e)
            {
                DownloaderUtils.error("couldn't browse to page: " + url);
            }
        }
    }

    private void hyperlinkLabel(String labelString)
    {
        JEditorPane label = new JEditorPane("text/html", labelString);
        label.setAlignmentX(Component.LEFT_ALIGNMENT);
        label.setAlignmentY(Component.BOTTOM_ALIGNMENT);
        label.setEditable(false);
        label.setOpaque(false);
        label.setMaximumSize(new Dimension(10000000, label.getPreferredSize().height));
        if(labelString.startsWith("<html>"))
        {
            label.addHyperlinkListener(new HyperlinkListener()
            {
                public void hyperlinkUpdate(HyperlinkEvent hle)
                {
                    if(HyperlinkEvent.EventType.ACTIVATED.equals(hle.getEventType()))
                    {
                        browse(hle.getURL().toString());
                    }
                }
            });
        }
        fieldPanel.add(label);
    }

    private void makeField(String key,
                        String value)
    {
        JTextField field = new JTextField(value);
        field.setAlignmentX(Component.LEFT_ALIGNMENT);
        field.setAlignmentY(Component.BOTTOM_ALIGNMENT);
        field.setCaretPosition(0);
        field.setMaximumSize(new Dimension(10000000, field.getPreferredSize().height));
        fieldMap.put(key, field);
        fieldPanel.add(field);
    }

    private void makeValueField(String key,
                                String prefix,
                                String value,
                                int columns)
    {
        JPanel fieldPrefixPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        
        JLabel fieldPrefix = new JLabel(prefix);
        fieldPrefixPanel.add(fieldPrefix);

        JTextField field = new JTextField(value);
        field.setCaretPosition(0);
        field.setMaximumSize(new Dimension(10000000, field.getPreferredSize().height));
        field.setColumns(columns);
        fieldMap.put(key, field);
        fieldPrefixPanel.add(field);
        
        fieldPrefixPanel.setMaximumSize(new Dimension(10000000, fieldPrefixPanel.getPreferredSize().height));
        fieldPrefixPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        fieldPrefixPanel.setAlignmentY(Component.BOTTOM_ALIGNMENT);
        
        fieldPanel.add(fieldPrefixPanel);
    }

    private void makeNumberValueField(String key,
                                        String prefix,
                                        Object obj,
                                        int columns)
    {
        JPanel fieldLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));

        JLabel fieldLabel = new JLabel(prefix);
        fieldLabelPanel.add(fieldLabel);

        MaskFormatter formatter = null;
        try
        {
            String format = "";
            for(int i = 0; i < columns; i++)
                format += "*";
            formatter =  new MaskFormatter(format);
        }
        catch(ParseException pe)
        {
            // shouldn't get error
            DownloaderUtils.error("couldn't make formatter");
        }
        formatter.setValidCharacters("0123456789");
        JFormattedTextField field = new JFormattedTextField(formatter);
        field.setValue(obj);
        field.setCaretPosition(0);
        field.setMaximumSize(new Dimension(10000000, field.getPreferredSize().height));
        field.setColumns(columns);
        fieldMap.put(key, field);
        fieldLabelPanel.add(field);

        fieldLabelPanel.setMaximumSize(new Dimension(10000000, fieldLabelPanel.getPreferredSize().height));
        fieldLabelPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        fieldLabelPanel.setAlignmentY(Component.BOTTOM_ALIGNMENT);

        fieldPanel.add(fieldLabelPanel);
    }

    private String getValueOrNull(Map map, String key)
    {
        if(map.containsKey(key))
            return(map.get(key).toString());
        return(null);
    }

    public void displaySeriesInfo(Series series, Chapter c)
    {
        String name, translation, mangaupdates, recomic;
        HashMap seriesInfo = series.getSeriesInfo();

        // get information
        if(seriesInfo == null)
        {
            name = series.getOriginalTitle();
            translation = null;
            mangaupdates = null;
            recomic = null;
        }
        else
        {
            name = getValueOrNull(seriesInfo, "name");
            translation = getValueOrNull(seriesInfo, "translation");
            mangaupdates = getValueOrNull(seriesInfo, "mangaupdates");
            recomic = getValueOrNull(seriesInfo, "recomic");
        }

        // clear the info panel
        clear();
        chapter = c;
        setButtonStates(true,
                        translation == null || mangaupdates == null || recomic == null,
                        chapter != null);

        // add the fields
        hyperlinkLabel("English Name");
        makeField("translation", translation == null ? "" : translation);
        hyperlinkLabel("Japanese Name");
        makeField("name", name);
        if(mangaupdates != null)
        {
            String link = "http://www.mangaupdates.com/series.html?id=" +
                    mangaupdates;
            hyperlinkLabel("<html><a href=\"" + link + "\">MangaUpdates</a>");
            makeNumberValueField("mangaupdates",
                                "www.mangaupdates.com/series.html?id=",
                                Integer.parseInt(mangaupdates),
                                7);

            MUImageLoadThread loader = new MUImageLoadThread(image, link);
            loader.start();
        }
        else
        {
            hyperlinkLabel("MangaUpdates");
            makeNumberValueField("mangaupdates",
                            "www.mangaupdates.com/series.html?id=",
                            "",
                            7);
        }
        
        if(recomic != null)
        {
            String link = "http://recomic.jp/" +
                    recomic;
            hyperlinkLabel("<html><a href=\"" + link + "\">ReComic</a>");
            makeValueField("recomic",
                    "recomic.jp/",
                    recomic,
                    15);
        }
        else
        {
            hyperlinkLabel("ReComic");
            makeValueField("recomic",
                    "recomic.jp/",
                    "",
                    15);
        }
    }

    private void setupButtons()
    {
        buttonPanel = new JPanel();

        submitButton = new JButton("Submit Information");
        submitButton.addActionListener(new ActionListener()
        {
            private String getSubmitURL(String ... keys) throws UnsupportedEncodingException
            {
                String ret = "http://anonscanlations.byethost14.com/submit.php?";
                
                if(keys.length == 0)
                    return(null);

                for(String key : keys)
                {
                    ret += key + "=";
                    if(fieldMap.containsKey(key))
                    {
                        JTextField field = fieldMap.get(key);
                        ret += URLEncoder.encode(field.getText(), "UTF-8");
                    }
                    ret += '&';
                }
                return(ret.substring(0, ret.length() - 1));
            }
            public void actionPerformed(ActionEvent ae)
            {
                try
                {
                    String submitURL = getSubmitURL("name", "translation", "mangaupdates", "recomic");

                    //DownloaderUtils.debug("submit: " + submitURL);

                    if(submitURL == null)
                        return;
                    
                    DownloaderUtils.getPage(submitURL, "ISO-8859-1");
                }
                catch(IOException ioe)
                {
                    // TODO error on submission
                    DownloaderUtils.error("couldn't submit");
                }
            }
        });
        buttonPanel.add(submitButton);

        downloadButton = new JButton("Download");
        downloadButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent ae)
            {
                if(chapter != null)
                    window.downloader.download(chapter);
            }
        });
        buttonPanel.add(downloadButton);

        setButtonStates(false, false, false);

        buttonPanel.setMaximumSize(new Dimension(10000000, buttonPanel.getPreferredSize().height));
        buttonPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        buttonPanel.setAlignmentY(Component.BOTTOM_ALIGNMENT);
        add(buttonPanel);
    }

    public void setButtonStates(boolean maySave, boolean maySubmit, boolean mayDownload)
    {
        submitButton.setText(maySubmit ? "Save and Submit" : "Save");
        submitButton.setEnabled(maySave);
        downloadButton.setEnabled(mayDownload);
    }
}
